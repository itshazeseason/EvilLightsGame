module ctrl (
    input clk,  // clock
    input rst,  // reset
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output we_regfile,
    output literal[16],
    output alufn[6],
    input  z,
    output bsel,
    output outsel
    
  ) {

    // ALUFN
    const ADD = 6b000000;      
    const SUB = 6b000001;  
    const MUL = 6b000010;  
    const AND = 6b011000;  
    const OR = 6b011110; 
    const XOR = 6b010110;  
    const A = 6b011010;  
    const B = 6b011100;  
    const BCA = 6b010010;     
    const ACB = 6b010100;     
    const SHL = 6b100000;  
    const SHR = 6b100001;  
    const SRA = 6b100011;  
    const ROL = 6b100100;  
    const ROR = 6b100101;  
    const RVA = 6b100111;    
    const CMPEQ = 6b110011;    
    const CMPLT = 6b110101;    
    const CMPLE= 6b110111;
    
  // Register
  const REG_P1    = 4b0000;   //r0 P1 score
  const REG_P2    = 4b0001;   //r1 P2 score
  const REG_ROUND = 4b0010;   //r2 round 
  const REG_LEDCD = 4b0011;   //r3 LED code
  const REG_TEMP  = 4b0100;   //r4 temp register
  const REG_TEMP2 = 4b0101;   //r5 temp register
  const REG_TEMP3 = 4b0110;   //r6 temp register
  const REG_TEMP4 = 4b0111;   //r7 temp register
  const REG_7SEG  = 4b1000;   //r8 7seg output
  const REG_P1LED = 4b1001;   //r9 P1 score display
  const REG_P2LED = 4b1010;   //r10 P2 score display
  const REG_LED   = 4b1011;   //r11 LED
  const REG_RND   = 4b1100;   //r12 random number register
  const REG_TIMER = 4b1101;   //r13 timer register
  const REG_SW    = 4b1110;   //r14 input port register
  

//  dff cnt[2] ( .clk(clk), .rst(rst) );
  
  .clk(clk){
    fsm game_fsm={
      START,
      S1, S2, S3, S4, S5, S6,
      L1, L2, L3, 
      R1, R2, R3, R4, R5, R6, R7, R8, R9,
      F1, F2, F3, F4, F5, F6, F7, F8, F9,
      W1, W2, W3, W4, W5,
      I1, I2
        
    };


  }
  
  always {

    // standard setting unless otherwise overwritten by each case 
    we_regfile = 0;
    regfile_write_address  = REG_TEMP;
    regfile_read_address_a = REG_TEMP;
    regfile_read_address_b = REG_TIMER;
    literal = 0;
    bsel = 0;
    outsel = 0;
    alufn = B;
    
//    cnt.d = cnt.q;
    
    if (rst){
      game_fsm.d = game_fsm.START;
    } else {
      case(game_fsm.q) {
        game_fsm.START:        //wait for start key press
          we_regfile = 0;
          regfile_read_address_a = REG_SW;
          literal = 16b1000000;      //chk start switch
          bsel = 1; 
          alufn = AND;
          if (~z) {
            game_fsm.d = game_fsm.S1;
          }

        game_fsm.S1:           //clr P1 score
          we_regfile = 1;
          regfile_write_address  = REG_P1;
          literal = 0;
          bsel = 1; 
          game_fsm.d = game_fsm.S2;
          
        game_fsm.S2:           //clr P2 score
          we_regfile = 1;
          regfile_write_address  = REG_P2;
          literal = 0;
          bsel = 1; 
          game_fsm.d = game_fsm.S3;
          
        game_fsm.S3:           //set round to 5
          we_regfile = 1;
          regfile_write_address  = REG_ROUND;
//          regfile_write_address  = REG_LEDCD;      //DBG
          literal = 5;
          bsel = 1; 
          game_fsm.d = game_fsm.S4;
          
        game_fsm.S4:           //disp 7seg
          we_regfile = 1;
//          regfile_read_address_b = REG_ROUND;   
          regfile_read_address_b = REG_LEDCD;     //DBG
          regfile_write_address  = REG_7SEG;
          outsel = 1;
          game_fsm.d = game_fsm.S5;
          
        game_fsm.S5:           //disp P1 score
          we_regfile = 1;
          regfile_read_address_b = REG_P1;   
          regfile_write_address  = REG_P1LED;
          game_fsm.d = game_fsm.S6;
          
        game_fsm.S6:           //disp P2 score
          we_regfile = 1;
          regfile_read_address_b = REG_P2;   
          regfile_write_address  = REG_P2LED;
          game_fsm.d = game_fsm.L1;
          
        game_fsm.L1:           //temp = rnd>>3
          we_regfile = 1;
          regfile_read_address_a = REG_RND;
          regfile_write_address  = REG_TEMP;
          literal = 3;
          bsel = 1; 
          alufn = SHR;
          game_fsm.d = game_fsm.L2;
          
        game_fsm.L2:           //temp = temp*6
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;
          regfile_write_address  = REG_TEMP;
          literal = 6;
          bsel = 1; 
          alufn = MUL;
          game_fsm.d = game_fsm.L3;
          
        game_fsm.L3:           //ledcode = temp >> 13
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;
          regfile_write_address  = REG_LEDCD;      //0~5
          literal = 13;
          bsel = 1; 
          alufn = SHR;
          game_fsm.d = game_fsm.R1;
          
        game_fsm.R1:           //set REG_TIMER 3sec
          we_regfile = 1;
          regfile_write_address  = REG_TIMER;
          literal = 2290;
          bsel = 1; 
          game_fsm.d = game_fsm.R2;
        
        game_fsm.R2:           //set blink count
          we_regfile = 1;
          regfile_write_address  = REG_TEMP;
          literal = 3;
          bsel = 1; 
          game_fsm.d = game_fsm.R3;
        
        game_fsm.R3:           //wait time out
          we_regfile = 0;
          regfile_read_address_b = REG_TIMER;
          if (z) {
            game_fsm.d = game_fsm.R4;
          }

        game_fsm.R4:        //blank 7seg
          we_regfile = 1;
          regfile_write_address  = REG_7SEG;
          literal = 0;
          bsel = 1; 
          game_fsm.d = game_fsm.R5;
          
        game_fsm.R5:           //set REG_TIMER 0.3sec
          we_regfile = 1;
          regfile_write_address  = REG_TIMER;
          literal = 308;  //off time * 1.31ms
          bsel = 1; 
          game_fsm.d = game_fsm.R6;
          
        game_fsm.R6:           //wait time out
          we_regfile = 0;
          regfile_read_address_b = REG_TIMER;
          if (z) {
            game_fsm.d = game_fsm.R7;
          }

        game_fsm.R7:        //disp round 
          we_regfile = 1;
//          regfile_read_address_b = REG_ROUND;   
          regfile_read_address_b = REG_LEDCD;     //DBG
          regfile_write_address  = REG_7SEG;
          outsel = 1;
          game_fsm.d = game_fsm.R8;
          
        game_fsm.R8:        //check end of flash
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;
          regfile_write_address  = REG_TEMP;
          literal = 1;
          bsel = 1; 
          alufn = SUB;
          if (z) {
            game_fsm.d = game_fsm.F1;    //end of flash
          } else {
            game_fsm.d = game_fsm.R9;    //more flash
          }
                    
        game_fsm.R9:           //set REG_TIMER 1sec
          we_regfile = 1;
          regfile_write_address  = REG_TIMER;
          literal = 763;
          bsel = 1; 
          game_fsm.d = game_fsm.R3;
          
        game_fsm.F1:           //check LED code bit 0 
          we_regfile = 0;
          regfile_read_address_a = REG_LEDCD;   // 0 ~ 5
          literal = 1;
          bsel = 1; 
          alufn = AND;
          if (z) {
            game_fsm.d = game_fsm.F2;    //LEDcode bit0 is 0
          } else {
            game_fsm.d = game_fsm.F3;    //LEDcode bit0 is 1
          }
          
        game_fsm.F2:           //TEMP = 10000
          we_regfile = 1;
          regfile_write_address  = REG_TEMP; 
          literal = 16;
          bsel = 1; 
          game_fsm.d = game_fsm.F4;
          
        game_fsm.F3:           //TEMP = 01000
          we_regfile = 1;
          regfile_write_address  = REG_TEMP; 
          literal = 8;
          bsel = 1; 
          game_fsm.d = game_fsm.F4;
          
        game_fsm.F4:           //check LED code bit 1 and 2 eq 0 
          we_regfile = 0;
          regfile_read_address_a = REG_LEDCD;   // 0 ~ 5
          literal = 6;
          bsel = 1; 
          alufn = AND;
          if (z) {
            game_fsm.d = game_fsm.F5;    //LEDcode[2:1] is 00
          } else {
            game_fsm.d = game_fsm.F6;    //LEDcode[2:1] is 01 or 10 
          }
          
        game_fsm.F5:           //set bit2  
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;   // 10000, 01000
          regfile_write_address  = REG_LED; 
          literal = 4;
          bsel = 1; 
          alufn = OR;
          game_fsm.d = game_fsm.F9;
          
        game_fsm.F6:           //check LED code bit 1 
          we_regfile = 0;
          regfile_read_address_a = REG_LEDCD;   // 0 ~ 5
          literal = 2;
          bsel = 1; 
          alufn = AND;
          if (z) {
            game_fsm.d = game_fsm.F8;    //LEDcode bit1 is 0
          } else {
            game_fsm.d = game_fsm.F7;    //LEDcode bit1 is 1
          }
          
        game_fsm.F7:           //set bit1  
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;   // 10000, 01000
          regfile_write_address  = REG_LED; 
          literal = 2;
          bsel = 1; 
          alufn = OR;
          game_fsm.d = game_fsm.F9;
          
        game_fsm.F8:           //set bit0
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;   // 10000, 01000
          regfile_write_address  = REG_LED; 
          literal = 1;
          bsel = 1; 
          alufn = OR;
          game_fsm.d = game_fsm.F9;
          
        game_fsm.F9:           //jump back
          we_regfile = 0;
          game_fsm.d = game_fsm.S1;
          
        game_fsm.I1:           //set REG_TIMER 3sec
          we_regfile = 1;
          regfile_read_address_b = REG_SW;      //clr sw 
          regfile_write_address  = REG_TIMER;
          literal = 763;
          bsel = 1; 
          game_fsm.d = game_fsm.I2;
          
        game_fsm.I2:           //wait time out
          we_regfile = 0;
          regfile_read_address_b = REG_TIMER;
          bsel = 0;
          if (z) {
            game_fsm.d = game_fsm.S1;
          }
                    
        game_fsm.W1:           //set REG_TIMER 1sec
          we_regfile = 1;
          regfile_write_address  = REG_TIMER;
          literal = 763;
          bsel = 1; 
          game_fsm.d = game_fsm.W2;
          
        game_fsm.W2:           //rnd/8 or and 1FFF
          we_regfile = 1;
          regfile_read_address_a = REG_RND;
          regfile_write_address  = REG_TEMP;
          literal = 3;
          bsel = 1; 
          alufn = SHR;
          game_fsm.d = game_fsm.W3;
          
        game_fsm.W3:           //multiply by 6
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;
          regfile_write_address  = REG_TEMP;
          literal = 6;
          bsel = 1; 
          alufn = MUL;
          game_fsm.d = game_fsm.W4;
          
        game_fsm.W4:           //shr 13
          we_regfile = 1;
          regfile_read_address_a = REG_TEMP;
          regfile_write_address  = REG_TEMP;
          literal = 13;
          bsel = 1; 
          alufn = SHR;
          game_fsm.d = game_fsm.W5;
          
        game_fsm.W5:           //wait time out
          we_regfile = 0;
          regfile_read_address_b = REG_TIMER;
          bsel = 0;
          if (z) {
            game_fsm.d = game_fsm.W1;
          }
          
      }
    }
  }
}