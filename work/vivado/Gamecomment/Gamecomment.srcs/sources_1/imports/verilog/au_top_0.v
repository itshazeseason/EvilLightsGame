/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [4:0] sw;
  
  reg [1:0] sw2;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [(3'h5+0)-1:0] M_button_out;
  reg [(3'h5+0)-1:0] M_button_in;
  
  genvar GEN_button0;
  generate
  for (GEN_button0=0;GEN_button0<3'h5;GEN_button0=GEN_button0+1) begin: button_gen_0
    button_conditioner_2 button (
      .clk(clk),
      .in(M_button_in[GEN_button0*(1)+(1)-1-:(1)]),
      .out(M_button_out[GEN_button0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_button_edge_out;
  reg [(3'h5+0)-1:0] M_button_edge_in;
  
  genvar GEN_button_edge0;
  generate
  for (GEN_button_edge0=0;GEN_button_edge0<3'h5;GEN_button_edge0=GEN_button_edge0+1) begin: button_edge_gen_0
    edge_detector_3 button_edge (
      .clk(clk),
      .in(M_button_edge_in[GEN_button_edge0*(1)+(1)-1-:(1)]),
      .out(M_button_edge_out[GEN_button_edge0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(2'h2+0)-1:0] M_button2_out;
  reg [(2'h2+0)-1:0] M_button2_in;
  
  genvar GEN_button20;
  generate
  for (GEN_button20=0;GEN_button20<2'h2;GEN_button20=GEN_button20+1) begin: button2_gen_0
    button_conditioner_2 button2 (
      .clk(clk),
      .in(M_button2_in[GEN_button20*(1)+(1)-1-:(1)]),
      .out(M_button2_out[GEN_button20*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(2'h2+0)-1:0] M_button_edge2_out;
  reg [(2'h2+0)-1:0] M_button_edge2_in;
  
  genvar GEN_button_edge20;
  generate
  for (GEN_button_edge20=0;GEN_button_edge20<2'h2;GEN_button_edge20=GEN_button_edge20+1) begin: button_edge2_gen_0
    edge_detector_3 button_edge2 (
      .clk(clk),
      .in(M_button_edge2_in[GEN_button_edge20*(1)+(1)-1-:(1)]),
      .out(M_button_edge2_out[GEN_button_edge20*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [7-1:0] M_gameunit_sevenseg;
  wire [5-1:0] M_gameunit_p1score;
  wire [5-1:0] M_gameunit_p2score;
  wire [5-1:0] M_gameunit_led;
  wire [48-1:0] M_gameunit_debug;
  reg [7-1:0] M_gameunit_sw;
  game_4 gameunit (
    .clk(clk),
    .rst(rst),
    .sw(M_gameunit_sw),
    .sevenseg(M_gameunit_sevenseg),
    .p1score(M_gameunit_p1score),
    .p2score(M_gameunit_p2score),
    .led(M_gameunit_led),
    .debug(M_gameunit_debug)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_button_in = io_button;
    M_button_edge_in = M_button_out;
    sw = M_button_edge_out;
    M_button2_in = io_dip[0+0+1-:2];
    M_button_edge2_in = M_button2_out;
    sw2 = M_button_edge2_out;
    M_gameunit_sw[6+0-:1] = sw[1+0-:1];
    M_gameunit_sw[5+0-:1] = sw[3+0-:1];
    M_gameunit_sw[4+0-:1] = sw[4+0-:1];
    M_gameunit_sw[3+0-:1] = sw2[0+0-:1];
    M_gameunit_sw[2+0-:1] = sw[0+0-:1];
    M_gameunit_sw[1+0-:1] = sw[2+0-:1];
    M_gameunit_sw[0+0-:1] = sw2[1+0-:1];
    io_led[0+7-:8] = M_gameunit_led[0+4-:5];
    io_led[8+7-:8] = M_gameunit_p2score[0+4-:5];
    io_led[16+7-:8] = M_gameunit_p1score[0+4-:5];
    io_seg = {1'h0, M_gameunit_sevenseg};
    io_sel = 4'h7;
  end
endmodule
