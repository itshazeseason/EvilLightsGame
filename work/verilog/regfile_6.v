/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_6 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    input [15:0] inp,
    output reg [63:0] outp,
    output reg [15:0] debug
  );
  
  
  
  integer i;
  
  reg timerclk;
  
  wire [1-1:0] M_timerclock_edge_out;
  reg [1-1:0] M_timerclock_edge_in;
  edge_detector_9 timerclock_edge (
    .clk(clk),
    .in(M_timerclock_edge_in),
    .out(M_timerclock_edge_out)
  );
  
  wire [1-1:0] M_timer_clock_value;
  reg [1-1:0] M_timer_clock_rst;
  counter_10 timer_clock (
    .clk(clk),
    .rst(M_timer_clock_rst),
    .value(M_timer_clock_value)
  );
  
  reg [15:0] M_r0_d, M_r0_q = 1'h0;
  reg [15:0] M_r1_d, M_r1_q = 1'h0;
  reg [15:0] M_r2_d, M_r2_q = 1'h0;
  reg [15:0] M_r3_d, M_r3_q = 1'h0;
  reg [15:0] M_r4_d, M_r4_q = 1'h0;
  reg [15:0] M_r5_d, M_r5_q = 1'h0;
  reg [15:0] M_r6_d, M_r6_q = 1'h0;
  reg [15:0] M_r7_d, M_r7_q = 1'h0;
  reg [15:0] M_r8_d, M_r8_q = 1'h0;
  reg [15:0] M_r9_d, M_r9_q = 1'h0;
  reg [15:0] M_r10_d, M_r10_q = 1'h0;
  reg [15:0] M_r11_d, M_r11_q = 1'h0;
  wire [32-1:0] M_rnd_num;
  reg [1-1:0] M_rnd_next;
  reg [32-1:0] M_rnd_seed;
  pn_gen_11 rnd (
    .clk(clk),
    .rst(rst),
    .next(M_rnd_next),
    .seed(M_rnd_seed),
    .num(M_rnd_num)
  );
  reg [15:0] M_timer_d, M_timer_q = 1'h0;
  reg [15:0] M_inreg_d, M_inreg_q = 1'h0;
  
  always @* begin
    M_r2_d = M_r2_q;
    M_r3_d = M_r3_q;
    M_r4_d = M_r4_q;
    M_r5_d = M_r5_q;
    M_r6_d = M_r6_q;
    M_r7_d = M_r7_q;
    M_r8_d = M_r8_q;
    M_r9_d = M_r9_q;
    M_r10_d = M_r10_q;
    M_timer_d = M_timer_q;
    M_r11_d = M_r11_q;
    M_inreg_d = M_inreg_q;
    M_r0_d = M_r0_q;
    M_r1_d = M_r1_q;
    
    M_rnd_next = 1'h1;
    M_rnd_seed = 1'h0;
    M_timer_clock_rst = (~|M_timer_q);
    M_timerclock_edge_in = M_timer_clock_value;
    timerclk = M_timerclock_edge_out;
    if (timerclk) begin
      M_timer_d = M_timer_q - 1'h1;
    end
    outp[0+15-:16] = M_r8_q;
    outp[16+15-:16] = M_r9_q;
    outp[32+15-:16] = M_r10_q;
    outp[48+15-:16] = M_r11_q;
    M_r0_d = M_r0_q;
    M_r1_d = M_r1_q;
    M_r2_d = M_r2_q;
    M_r3_d = M_r3_q;
    M_r4_d = M_r4_q;
    M_r5_d = M_r5_q;
    M_r6_d = M_r6_q;
    M_r7_d = M_r7_q;
    M_r8_d = M_r8_q;
    M_r9_d = M_r9_q;
    M_r10_d = M_r10_q;
    M_r11_d = M_r11_q;
    M_inreg_d = M_inreg_q;
    for (i = 1'h0; i < 5'h10; i = i + 1) begin
      if (inp[(i)*1+0-:1]) begin
        M_inreg_d[(i)*1+0-:1] = 1'h1;
      end
    end
    if (read_address_b == 4'he) begin
      M_inreg_d = 1'h0;
    end
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_r0_d = data;
        end
        4'h1: begin
          M_r1_d = data;
        end
        4'h2: begin
          M_r2_d = data;
        end
        4'h3: begin
          M_r3_d = data;
        end
        4'h4: begin
          M_r4_d = data;
        end
        4'h5: begin
          M_r5_d = data;
        end
        4'h6: begin
          M_r6_d = data;
        end
        4'h7: begin
          M_r7_d = data;
        end
        4'h8: begin
          M_r8_d = data;
        end
        4'h9: begin
          M_r9_d = data;
        end
        4'ha: begin
          M_r10_d = data;
        end
        4'hb: begin
          M_r11_d = data;
        end
        4'hd: begin
          M_timer_d = data;
        end
      endcase
    end
    
    case (read_address_a)
      4'h0: begin
        out_a = M_r0_q;
      end
      4'h1: begin
        out_a = M_r1_q;
      end
      4'h2: begin
        out_a = M_r2_q;
      end
      4'h3: begin
        out_a = M_r3_q;
      end
      4'h4: begin
        out_a = M_r4_q;
      end
      4'h5: begin
        out_a = M_r5_q;
      end
      4'h6: begin
        out_a = M_r6_q;
      end
      4'h7: begin
        out_a = M_r7_q;
      end
      4'h8: begin
        out_a = M_r8_q;
      end
      4'h9: begin
        out_a = M_r9_q;
      end
      4'ha: begin
        out_a = M_r10_q;
      end
      4'hb: begin
        out_a = M_r11_q;
      end
      4'hc: begin
        out_a = M_rnd_num[0+15-:16];
      end
      4'hd: begin
        out_a = M_timer_q;
      end
      4'he: begin
        out_a = M_inreg_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (read_address_b)
      4'h0: begin
        out_b = M_r0_q;
      end
      4'h1: begin
        out_b = M_r1_q;
      end
      4'h2: begin
        out_b = M_r2_q;
      end
      4'h3: begin
        out_b = M_r3_q;
      end
      4'h4: begin
        out_b = M_r4_q;
      end
      4'h5: begin
        out_b = M_r5_q;
      end
      4'h6: begin
        out_b = M_r6_q;
      end
      4'h7: begin
        out_b = M_r7_q;
      end
      4'h8: begin
        out_b = M_r8_q;
      end
      4'h9: begin
        out_b = M_r9_q;
      end
      4'ha: begin
        out_b = M_r10_q;
      end
      4'hb: begin
        out_b = M_r11_q;
      end
      4'hc: begin
        out_b = M_rnd_num[0+15-:16];
      end
      4'hd: begin
        out_b = M_timer_q;
      end
      4'he: begin
        out_b = M_inreg_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
    debug = M_r5_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_r0_q <= 1'h0;
      M_r1_q <= 1'h0;
      M_r2_q <= 1'h0;
      M_r3_q <= 1'h0;
      M_r4_q <= 1'h0;
      M_r5_q <= 1'h0;
      M_r6_q <= 1'h0;
      M_r7_q <= 1'h0;
      M_r8_q <= 1'h0;
      M_r9_q <= 1'h0;
      M_r10_q <= 1'h0;
      M_r11_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_inreg_q <= 1'h0;
    end else begin
      M_r0_q <= M_r0_d;
      M_r1_q <= M_r1_d;
      M_r2_q <= M_r2_d;
      M_r3_q <= M_r3_d;
      M_r4_q <= M_r4_d;
      M_r5_q <= M_r5_d;
      M_r6_q <= M_r6_d;
      M_r7_q <= M_r7_d;
      M_r8_q <= M_r8_d;
      M_r9_q <= M_r9_d;
      M_r10_q <= M_r10_d;
      M_r11_q <= M_r11_d;
      M_timer_q <= M_timer_d;
      M_inreg_q <= M_inreg_d;
    end
  end
  
endmodule
